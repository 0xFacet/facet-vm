pragma :rubidity, "1.0.0"

import "./ERC20.rubidity"
import "./Ownable.rubidity"
import "./Upgradeable.rubidity"

contract :BridgeAndCallHelper, is: [:Upgradeable, :Ownable], upgradeable: true do
  event :CallFromBridge, {
    bridgingUser: :address,
    addressToCall: :address,
    calldata: :string,
    initialAmount: :uint256,
    finalAmount: :uint256,
    feeAmount: :uint256,
    resultStatus: :bool,
    resultData: :string
  }
  
  event :BridgeUpdated, { newBridge: :address }
  event :FeeUpdated, { newFee: :uint256 }
  
  address :public, :bridge
  uint256 :public, :fee
  
  bool :locked
  
  constructor(bridge: :address, fee: :uint256, owner: :address) {
    Ownable.constructor(owner: owner)
    Upgradeable.constructor(upgradeAdmin: owner)

    s.bridge = bridge
    s.fee = fee
  }
  
  function :setBridge, { newBridge: :address }, :public do
    onlyOwner!
    
    s.bridge = newBridge
    
    emit :BridgeUpdated, newBridge: newBridge
  end
  
  function :setFee, { newFee: :uint256 }, :public do
    onlyOwner!
    
    s.fee = newFee
    
    emit :FeeUpdated, newFee: newFee
  end
  
  function :callFromBridge, {
    bridgingUser: :address,
    addressToCall: :address,
    base64Calldata: :string
  }, :public do
    require(msg.sender == s.bridge, "Only the bridge can callFromBridge")
    require(addressToCall != address(this), "Cannot call self")
    
    require(!s.locked, 'No reentrancy allowed')
    s.locked = true
    
    calldata = base64Calldata.base64Decode
    initialBalance = _balance()
    
    calculatedFee = initialBalance < s.fee ? initialBalance : s.fee
    
    if calculatedFee > 0
      _transfer(s.owner, calculatedFee)
    end
    
    _approve(addressToCall, initialBalance - calculatedFee)
    
    (success, data) = addressToCall.call(calldata)
    
    _approve(addressToCall, 0)
    
    finalBalance = _balance()
    
    if finalBalance > 0
      _transfer(bridgingUser, finalBalance)
    end
    
    s.locked = false
    
    emit :CallFromBridge,
        bridgingUser: bridgingUser,
        addressToCall: addressToCall,
        calldata: calldata,
        initialAmount: initialBalance,
        finalAmount: finalBalance,
        feeAmount: calculatedFee,
        resultStatus: success,
        resultData: data
  end
  
  function :_balance, :internal, :view, returns: :uint256 do
    ERC20(s.bridge).balanceOf(address(this))
  end
  
  function :_approve, { spender: :address, amount: :uint256 }, :internal, returns: :bool do
    ERC20(s.bridge).approve(spender, amount)
  end
  
  function :_transfer, { to: :address, amount: :uint256 }, :internal, returns: :bool do
    ERC20(s.bridge).transfer(to, amount)
  end
end
