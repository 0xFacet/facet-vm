pragma :rubidity, "1.0.0"

import "./ERC20.rubidity"

contract :FacetBuddy do
  event :CallOnBehalfOfUser, {
    onBehalfOf: :address,
    addressToCall: :address,
    calldata: :string,
    initialAmount: :uint256,
    finalAmount: :uint256,
    resultSuccess: :bool,
    resultData: :string
  }
  
  address :public, :factory
  address :public, :erc20Bridge
  address :public, :forUser
  
  bool :locked
  
  constructor(
    erc20Bridge: :address,
    forUser: :address
  ) {
    s.factory = msg.sender
    s.erc20Bridge = erc20Bridge
    s.forUser = forUser
  }
  
  function :_makeCall, {
    addressToCall: :address,
    calldata: :string,
    revertOnFailure: :bool
  }, :internal do
    require(addressToCall != address(this), "Cannot call self")
    require(!s.locked, 'No reentrancy allowed')
    s.locked = true
    
    initialBalance = _balance()
    
    _approve(addressToCall, initialBalance)
    
    (success, data) = addressToCall.call(calldata)
    
    require(success || !revertOnFailure, "Call failed: (#{calldata})")
    
    _approve(addressToCall, 0)
    
    finalBalance = _balance()
    
    if finalBalance > 0
      _transfer(s.forUser, finalBalance)
    end
    
    s.locked = false
    
    emit :CallOnBehalfOfUser,
        onBehalfOf: s.forUser,
        addressToCall: addressToCall,
        calldata: calldata,
        initialAmount: initialBalance,
        finalAmount: finalBalance,
        resultSuccess: success,
        resultData: data
  end
  
  function :callForUser, {
    amountToSpend: :uint256,
    addressToCall: :address,
    calldata: :string
  }, :public do
    require(
      msg.sender == s.forUser || msg.sender == s.factory,
      "Only the user or factory can callForUser"
    )
    
    ERC20(s.erc20Bridge).transferFrom(
      s.forUser,
      address(this),
      amountToSpend
    )
    
    _makeCall(addressToCall, calldata, true)
  end
  
  function :callFromBridge, {
    addressToCall: :address,
    calldata: :string
  }, :public do
    require(msg.sender == s.erc20Bridge, "Only the bridge can callFromBridge")
    
    _makeCall(addressToCall, calldata, false)
  end
  
  function :_balance, :internal, :view, returns: :uint256 do
    ERC20(s.erc20Bridge).balanceOf(address(this))
  end
  
  function :_approve, { spender: :address, amount: :uint256 }, :internal, returns: :bool do
    ERC20(s.erc20Bridge).approve(spender, amount)
  end
  
  function :_transfer, { to: :address, amount: :uint256 }, :internal, returns: :bool do
    ERC20(s.erc20Bridge).transfer(to, amount)
  end
end
