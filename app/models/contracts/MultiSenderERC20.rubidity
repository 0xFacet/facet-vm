pragma :rubidity, "1.0.0"

import './ERC20.rubidity'

contract :MultiSenderERC20 do
  event :MultiTransfer, { tokenAddress: :address, recipients: [:address], amounts: [:uint256] }
  uint256 :public, :singleTxAirdropLimit
  
  constructor(
  ) {
    s.singleTxAirdropLimit = 50
  }

  function :transferMultiple, { tokenAddress: :address, recipients: [:address], amounts: [:uint256] }, :public do
    require(recipients.length == amounts.length, 'Address and amount arrays must be the same length')
    require(recipients.length <= s.singleTxAirdropLimit, 'Cannot import more than 25 addresses at a time')

    forLoop(
      condition: -> i { i < recipients.length },
      max_iterations: s.singleTxAirdropLimit
    ) do |i|
      to = recipients[i]
      amount = amounts[i]

      ERC20(tokenAddress).transferFrom(
              from: msg.sender,
              to: to,
              amount: amount
            )
    end
    emit :MultiTransfer, tokenAddress: tokenAddress, recipients: recipients, amounts: amounts
  end

  function :withdrawStuckTokens, { tokenAddress: :address, to: :address, amount: :uint256 }, :public do
      ERC20(tokenAddress).transfer(to: to, amount: amount)
  end
end
