pragma :rubidity, "1.0.0"

contract :NFTMetadataRenderer01, abstract: true do
  function :createMetadataEdition, {
    name: :string,
    description: :string,
    imageURI: :string,
    animationURI: :string,
    tokenOfEdition: :uint256,
    editionSize: :uint256
  }, :internal, :pure, returns: :string do
    _tokenMediaData = tokenMediaData(imageURI: imageURI, animationURI: animationURI)
    json = createMetadataJSON(
      name: name,
      description: description,
      mediaData: _tokenMediaData,
      tokenOfEdition: tokenOfEdition,
      editionSize: editionSize
    )
    encodeMetadataJSON(json: json)
  end

  function :encodeContractURIJSON, {
    name: :string,
    description: :string,
    imageURI: :string,
    animationURI: :string,
    royaltyBPS: :uint256,
    royaltyRecipient: :address
  }, :internal, :pure, returns: :string do
    imageSpace = imageURI.length > 0 ? '", "image": "' + imageURI : ""
    animationSpace = animationURI.length > 0 ? '", "animation_url": "' + animationURI : ""

    encodeMetadataJSON(
      '{"name": "' + name +
      '", "description": "' + description +
      imageSpace + animationSpace + '"}'
    )
  end

  function :createMetadataJSON, { name: :string, description: :string, mediaData: :string, tokenOfEdition: :uint256, editionSize: :uint256 }, :internal, :pure, returns: :bytes do
    editionSizeText = editionSize > 0 ? "/" + editionSize.toString() : ""
    
    '{"name": "' + name + " " + tokenOfEdition.toString() + editionSizeText +
    '", "description": "' + description + '", "' + mediaData +
    'properties": {"number": ' + tokenOfEdition.toString() +
    ', "name": "' + name + '"}}'
  end

  function :encodeMetadataJSON, { json: :string }, :internal, :pure, returns: :string do
    "data:application/json;base64," + json.base64Encode
  end

  function :tokenMediaData, { imageUrl: :string, animationUrl: :string }, :internal, :pure, returns: :string do
    hasImage = imageUrl.length > 0
    hasAnimation = animationUrl.length > 0
    if hasImage && hasAnimation
      return 'image": "' + imageUrl + '", "animation_url": "' + animationUrl + '", "'
    elsif hasImage
      return 'image": "' + imageUrl + '", "'
    elsif hasAnimation
      return 'animation_url": "' + animationUrl + '", "'
    end
    
    ""
  end
end
