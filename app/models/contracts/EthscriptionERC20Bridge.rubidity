pragma :rubidity, "1.0.0"

import './ERC20.rubidity'

contract :EthscriptionERC20Bridge, is: :ERC20 do
  event :BridgedIn, { to: :address, amount: :uint256 }
  event :InitiateWithdrawal, { from: :address, amount: :uint256, withdrawalId: :bytes32 }
  event :WithdrawalComplete, { to: :address, amount: :uint256, withdrawalId: :bytes32 }
  
  address :public, :trustedSmartContract
  mapping ({ address: :uint256 }), :public, :bridgedInAmounts
  mapping ({ bytes32: :uint256 }), :public, :pendingWithdrawalAmounts
  mapping ({ address: array(:bytes32) }), :public, :pendingUserWithdrawalIds
  
  constructor(
    name: :string,
    symbol: :string,
    trustedSmartContract: :address,
  ) {
    ERC20.constructor(name: name, symbol: symbol, decimals: 18)
    
    s.trustedSmartContract = trustedSmartContract
  }
  
  function :bridgeIn, { to: :address, amount: :uint256 }, :public do
    require(
      msg.sender == s.trustedSmartContract,
      "Only the trusted smart contract can bridge in tokens"
    )
    
    s.bridgedInAmounts[to] += amount

    _mint(to: to, amount: amount)
    emit :BridgedIn, to: to, amount: amount
  end
  
  function :bridgeOut, { amount: :uint256 }, :public do
    withdrawalId = esc.currentTransactionHash
    require(
      s.pendingWithdrawalAmounts[withdrawalId] == 0,
      "Already bridged out"
    )
    require(
      s.bridgedInAmounts[msg.sender] >= amount,
      "Not enough bridged in"
    )

    s.bridgedInAmounts[msg.sender] -= amount
    
    s.pendingWithdrawalAmounts[withdrawalId] = amount
    s.pendingUserWithdrawalIds[msg.sender].push(withdrawalId)
      
    _burn(from: msg.sender, amount: amount)
    emit :InitiateWithdrawal, from: msg.sender, amount: amount, withdrawalId: withdrawalId
  end
  
  function :markWithdrawalComplete, {
    to: :address,
    withdrawalId: :bytes32
  }, :public do
    require(
      msg.sender == s.trustedSmartContract,
      'Only the trusted smart contract can mark withdrawals as complete'
    )
    require(
      _removeFirstOccurenceOfValueFromArray(
        s.pendingUserWithdrawalIds[to],
        withdrawalId
      ),
      "Withdrawal id not found"
    )
    
    amount = s.pendingWithdrawalAmounts[withdrawalId]
    s.pendingWithdrawalAmounts[withdrawalId] = 0
      
    emit :WithdrawalComplete, to: to, amount: amount, withdrawalId: withdrawalId
  end
  
  function :getPendingWithdrawalsForUser, { user: :address }, :public, :view, returns: [:bytes32] do
    return s.pendingUserWithdrawalIds[user]
  end
  
  function :_removeFirstOccurenceOfValueFromArray, { arr: array(:bytes32), value: :bytes32 }, :internal, returns: :bool do
    for i in 0...arr.length
      if arr[i] == value
        return _removeItemAtIndex(arr: arr, indexToRemove: i)
      end
    end
    
    return false
  end
  
  function :_removeItemAtIndex, { arr: array(:bytes32), indexToRemove: :uint256 }, :internal, returns: :bool do
    lastIndex = arr.length - 1
    
    if lastIndex != indexToRemove
      lastItem = arr[lastIndex]
      arr[indexToRemove] = lastItem
    end
    
    arr.pop
    
    return true
  end
end
