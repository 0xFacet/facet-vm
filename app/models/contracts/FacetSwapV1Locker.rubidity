pragma :rubidity, "1.0.0"

import './Upgradeable.rubidity'
import './Pausable.rubidity'
import './Ownable.rubidity'
import './FacetSwapV1Factory02.rubidity'

contract :FacetSwapV1Locker, is: [:Ownable, :Upgradeable, :Pausable], upgradeable: true do
  event :Deposit, {
    lpToken: :address,
    amount: :uint256,
    lockDate: :uint256,
    unlockDate: :uint256,
    withdrawer: :address,
    lockId: :uint256
  }
  
  event :Relock, {
    lpToken: :address,
    lockId: :uint256,
    unlockDate: :uint256
  }
  
  event :Withdraw, {
    lpToken: :address,
    amount: :uint256,
    withdrawer: :address,
    lockId: :uint256
  }
   
  struct :TokenLock do
    uint256 :lockId
    address :lpToken
    address :owner
    uint256 :amount
    uint256 :lockDate
    uint256 :unlockDate
  end
  
  address :public, :facetSwapFactory
  uint256 :public, :nextLockId
  mapping ({ uint256: :TokenLock }), :public, :tokenLocks
  
  constructor(_facetSwapFactory: :address) {
    s.facetSwapFactory = _facetSwapFactory
    s.nextLockId = 1
    
    Upgradeable.constructor(upgradeAdmin: msg.sender)
    Ownable.constructor(owner: msg.sender)
  }
  
  function :lockLPToken, {
    lpToken: :address,
    amount: :uint256,
    unlockDate: :uint256,
    withdrawer: :address
  }, :public do
    whenNotPaused!
    
    require(unlockDate < 10000000000, "Timestamp is in seconds")
    require(unlockDate > block.timestamp, "Unlock time must be in the future")
    require(amount > 0, "Amount must be greater than 0")
    require(withdrawer != address(0), "Invalid withdrawer")
  
    lpair = FacetSwapV1Pair02(lpToken)
    
    factoryPairAddress = FacetSwapV1Factory02(s.facetSwapFactory).getPair(
      lpair.token0(),
      lpair.token1()
    )
    require(factoryPairAddress == lpToken, "Invalid LP token")  
    
    require(ERC20(lpToken).transferFrom(msg.sender, address(this), amount), "Transfer failed")
  
    tokenLock = TokenLock(
      lockId: s.nextLockId,
      lpToken: lpToken,
      owner: withdrawer,
      amount: amount,
      lockDate: block.timestamp,
      unlockDate: unlockDate
    )
    
    require(s.tokenLocks[tokenLock.lockId] == TokenLock(), "Lock already exists")
    
    s.tokenLocks[tokenLock.lockId] = tokenLock
    
    s.nextLockId += 1
    
    emit :Deposit,
      lpToken: tokenLock.lpToken,
      amount: tokenLock.amount,
      lockDate: tokenLock.lockDate,
      unlockDate: tokenLock.unlockDate,
      withdrawer: tokenLock.owner,
      lockId: tokenLock.lockId
  end
  
  function :relock, { lockId: :uint256, unlockDate: :uint256 }, :public do
    tokenLock = s.tokenLocks[lockId]
    
    require(tokenLock.owner == msg.sender, "Only owner")
    require(unlockDate < 10000000000, "Timestamp is in seconds")
    require(unlockDate > block.timestamp, "Unlock time must be in the future")
    require(unlockDate > tokenLock.unlockDate, "Unlock date must be after current unlock date")
  
    tokenLock.unlockDate = unlockDate
    
    emit :Relock, lpToken: tokenLock.lpToken, lockId: lockId, unlockDate: unlockDate
  end
  
  function :withdraw, { lockId: :uint256, amount: :uint256 }, :public do
    tokenLock = s.tokenLocks[lockId]
    
    require(tokenLock.owner == msg.sender, "Only owner")
    require(amount > 0, "Amount must be greater than 0")
    require(tokenLock != TokenLock(), "Lock does not exist")
    require(block.timestamp > tokenLock.unlockDate, "Tokens are still locked")
    require(tokenLock.amount >= amount, "Insufficient balance")
  
    tokenLock.amount -= amount
  
    lpToken = tokenLock.lpToken
    
    if tokenLock.amount == 0
      s.tokenLocks[lockId] = TokenLock()
    end
    
    require(ERC20(lpToken).transfer(msg.sender, amount), "Transfer failed")
  
    emit :Withdraw, lpToken: lpToken, amount: amount, withdrawer: msg.sender, lockId: lockId
  end
  
  function :pause, :public do
    onlyOwner!
    _pause()
  end
  
  function :unpause, :public do
    onlyOwner!
    _unpause()
  end
end
