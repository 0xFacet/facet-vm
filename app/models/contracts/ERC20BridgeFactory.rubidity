pragma :rubidity, "1.0.0"

import "./Pausable.rubidity"
import "./Ownable.rubidity"
import "./ERC20Bridge.rubidity"
import "./Upgradeable.rubidity"

contract :ERC20BridgeFactory, is: [:Ownable, :Pausable, :Upgradeable], upgradeable: true do
  event :BridgedIn, {
    to: :address,
    amount: :uint256,
    smartContract: :address,
    dumbContract: :address
  }
  
  event :InitiateWithdrawal, {
    from: :address,
    amount: :uint256,
    withdrawalId: :bytes32,
    smartContract: :address,
    dumbContract: :address,
  }
  
  event :WithdrawalComplete, {
    to: :address,
    amount: :uint256,
    withdrawalId: :bytes32,
    smartContract: :address,
    dumbContract: :address,
  }
  
  event :BridgeCreated, {
    smartContract: :address,
    dumbContract: :address,
    tokenSmartContract: :address
  }

  address :public, :trustedSmartContract
  
  mapping ({ address: :address }), :public, :bridgeDumbContractToSmartContract
  mapping ({ address: :address }), :public, :bridgeSmartContractToDumbContract
  
  mapping ({ address: :bytes32 }), :public, :userWithdrawalId
  mapping ({ bytes32: :uint256 }), :public, :withdrawalIdAmount
  mapping ({ bytes32: :address }), :public, :withdrawalIdTokenSmartContract
  
  constructor(trustedSmartContract: :address) {
    require(trustedSmartContract != address(0), "Invalid smart contract")

    Upgradeable.constructor(upgradeAdmin: msg.sender)
    Ownable.constructor(owner: msg.sender)

    s.trustedSmartContract = trustedSmartContract
  }
  
  function :bridgeIn, {
    tokenSmartContract: :address,
    decimals: :uint8,
    symbol: :string,
    name: :string,
    to: :address,
    amount: :uint256
  }, :public do
    require(
      msg.sender == s.trustedSmartContract,
      "Only the trusted smart contract can bridge in tokens"
    )
    
    bridge = findOrCreateBridge(
      tokenSmartContract: tokenSmartContract,
      decimals: decimals,
      symbol: symbol,
      name: name
    )
    
    ERC20Bridge(bridge).mintFromFactory(to: to, amount: amount)
    
    emit :BridgedIn,
      to: to,
      amount: amount,
      dumbContract: bridge,
      smartContract: tokenSmartContract
  end
  
  function :findOrCreateBridge, {
    tokenSmartContract: :address,
    decimals: :uint8,
    symbol: :string,
    name: :string
  }, :internal, returns: :address do
    existingBridge = s.bridgeSmartContractToDumbContract[tokenSmartContract]
    
    if existingBridge != address(0)
      return existingBridge
    end
    
    salt = keccak256(abi.encodePacked(tokenSmartContract))
    
    bridge = new ERC20Bridge(
      tokenSmartContract,
      "Wrapped #{name}",
      "W#{symbol}",
      decimals,
      { salt: salt }
    )
    
    require(s.bridgeDumbContractToSmartContract[bridge] == address(0), "Bridge already exists")
    
    s.bridgeSmartContractToDumbContract[tokenSmartContract] = bridge
    s.bridgeDumbContractToSmartContract[bridge] = tokenSmartContract
    
    emit :BridgeCreated,
      smartContract: tokenSmartContract,
      dumbContract: bridge,
      tokenSmartContract: tokenSmartContract
    
    return bridge
  end
  
  function :bridgeOut, { bridgeDumbContract: :address, amount: :uint256 }, :public do
    whenNotPaused!
    
    smartContract = s.bridgeDumbContractToSmartContract[bridgeDumbContract]
    
    require(smartContract != address(0), "Bridge not found")
    
    withdrawalId = tx.current_transaction_hash
    require(
      s.userWithdrawalId[msg.sender] == bytes32(0),
      "Withdrawal pending"
    )
    require(
      s.withdrawalIdAmount[withdrawalId] == 0,
      "Already bridged out"
    )
    require(
      s.withdrawalIdTokenSmartContract[withdrawalId] == address(0),
      "Already bridged out"
    )
    require(amount > 0, "Invalid amount")

    s.userWithdrawalId[msg.sender] = withdrawalId
    s.withdrawalIdAmount[withdrawalId] = amount
    s.withdrawalIdTokenSmartContract[withdrawalId] = smartContract
    
    ERC20Bridge(bridgeDumbContract).burnFromFactory(from: msg.sender, amount: amount)
    
    emit :InitiateWithdrawal,
      from: msg.sender,
      amount: amount,
      withdrawalId: withdrawalId,
      dumbContract: bridgeDumbContract,
      smartContract: smartContract
  end
  
  function :markWithdrawalComplete, {
    to: :address,
    withdrawalId: :bytes32,
    tokenSmartContract: :address
  }, :public do
    require(
      msg.sender == s.trustedSmartContract,
      "Only the trusted smart contract can mark withdrawals as complete"
    )
    require(
      s.userWithdrawalId[to] == withdrawalId,
      "Withdrawal id not found"
    )
    require(
      s.withdrawalIdTokenSmartContract[withdrawalId] == tokenSmartContract,
      "Invalid token smart contract"
    )
    
    dumbContract = s.bridgeSmartContractToDumbContract[tokenSmartContract]
    amount = s.withdrawalIdAmount[withdrawalId]
    
    s.withdrawalIdAmount[withdrawalId] = 0
    s.userWithdrawalId[to] = bytes32(0)
    s.withdrawalIdTokenSmartContract[withdrawalId] = address(0)
    
    emit :WithdrawalComplete,
      to: to,
      amount: amount,
      withdrawalId: withdrawalId,
      dumbContract: dumbContract,
      smartContract: tokenSmartContract
  end
  
  function :pause, :public do
    onlyOwner!
    _pause()
  end
  
  function :unpause, :public do
    onlyOwner!
    _unpause()
  end
end
