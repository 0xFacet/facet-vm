pragma :rubidity, "1.0.0"

import './ERC721.rubidity'

contract :Checks, is: :ERC721 do
  uint256 :public, :totalSupply
  
  constructor(
    name: :string,
    symbol: :string,
  ) {
    ERC721.constructor(name: name, symbol: symbol)
  }
  
  function :mint, { amount: :uint256 }, :public, returns: :uint256 do
    require(amount > 0, 'Amount must be positive')
    
    forLoop(
      condition: -> i { i < amount }
    ) do |i|
      tokenId = s.totalSupply + i
      _mint(to: msg.sender, id: tokenId)
    end
    
    s.totalSupply += amount
  end
  
  function :tokenURI, { id: :uint256 }, :public, :view, :override, returns: :string do
    require(_exists(id: id), 'ERC721Metadata: URI query for nonexistent token')
    
    json_data = json.stringify(
      name: "#{s.name} ##{string(id)}",
      description: "A checks NFT",
      image: generateSVG(id),
    )
    
    return "data:application/json,#{json_data}"
  end

  function :generateSVG, { id: :uint256 }, :internal, returns: :string do
    return "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 1200' width='1200' height='1200'><rect x='0' y='0' width='100%' height='100%' fill='lightgray'/><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' font-size='100'>##{string(id)}</text></svg>"
  end
end
