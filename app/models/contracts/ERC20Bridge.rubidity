pragma :rubidity, "1.0.0"

import "./ERC20.rubidity"
import "./Upgradeable.rubidity"

contract :ERC20Bridge, is: [:ERC20, :Upgradeable], upgradeable: true do
  event :BridgedIn, { to: :address, amount: :uint256 }
  event :InitiateWithdrawal, { from: :address, amount: :uint256, withdrawalId: :bytes32 }
  event :WithdrawalComplete, { to: :address, amount: :uint256, withdrawalId: :bytes32 }
  
  address :public, :factory
  address :public, :tokenSmartContract
  address :public, :trustedSmartContract
  
  mapping ({ bytes32: :uint256 }), :public, :withdrawalIdAmount
  mapping ({ address: :bytes32 }), :public, :userWithdrawalId
  
  constructor(
    tokenSmartContract: :address,
    trustedSmartContract: :address,
    name: :string,
    symbol: :string,
    decimals: :uint8
  ) {
    ERC20.constructor(name: name, symbol: symbol, decimals: decimals)
    Upgradeable.constructor(upgradeAdmin: msg.sender)
    
    s.tokenSmartContract = tokenSmartContract
    s.trustedSmartContract = trustedSmartContract
    s.factory = msg.sender
  }
  
  function :onlyFactory!, :internal do
    require(msg.sender == s.factory, "Only the factory can call this function")
  end
  
  function :bridgeIn, { to: :address, amount: :uint256 }, :public do
    onlyFactory!
    
    _mint(to: to, amount: amount)
    emit :BridgedIn, to: to, amount: amount
  end
  
  function :bridgeOut, { from: :address, amount: :uint256 }, :public do
    onlyFactory!
    
    withdrawalId = tx.current_transaction_hash
    require(
      s.userWithdrawalId[from] == bytes32(0),
      "Withdrawal pending"
    )
    require(
      s.withdrawalIdAmount[withdrawalId] == 0,
      "Already bridged out"
    )
    require(amount > 0, "Invalid amount")

    s.userWithdrawalId[from] = withdrawalId
    s.withdrawalIdAmount[withdrawalId] = amount
      
    _burn(from: from, amount: amount)
    emit :InitiateWithdrawal, from: from, amount: amount, withdrawalId: withdrawalId
  end
  
  function :markWithdrawalComplete, {
    to: :address,
    withdrawalId: :bytes32
  }, :public do
    onlyFactory!
    
    require(
      s.userWithdrawalId[to] == withdrawalId,
      "Withdrawal id not found"
    )
    
    amount = s.withdrawalIdAmount[withdrawalId]
    s.withdrawalIdAmount[withdrawalId] = 0
    s.userWithdrawalId[to] = bytes32(0)
      
    emit :WithdrawalComplete, to: to, amount: amount, withdrawalId: withdrawalId
  end
end
