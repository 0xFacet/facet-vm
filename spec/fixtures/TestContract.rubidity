pragma :rubidity, "1.0.0"

import '/app/models/contracts/ERC20.rubidity'

contract :StartingParent do
  function :definedInNonClosestParent, :public, :virtual do
    require(false, "I am the revert version")
  end
  
  function :closestParentFunction, :public, :virtual do
  end
end

contract :TestContract, is: [:ERC20, :StartingParent] do
  string :public, :definedInTest

  constructor(
    name: :string,
    symbol: :string,
    decimals: :uint8
  ) {
    ERC20.constructor(name: name, symbol: symbol, decimals: decimals)
  }
  
  function :_mint, { to: :address, amount: :uint256 }, :public, :virtual, :override do
    s.definedInTest = "definedInTest"
    ERC20._mint(to: to, amount: amount)
  end
  
  function :nonVirtual, :public do
  end
  
  function :definedInNonClosestParent, :public, :virtual, :override do
  end
  
  function :closestParentFunction, :public, :virtual, :override do
  end
end

contract :TestContractNoOverride, is: :ERC20 do
  constructor(
    name: :string,
    symbol: :string,
    decimals: :uint8
  ) {
    ERC20.constructor(name: name, symbol: symbol, decimals: decimals)
  }
end

contract :NonToken do
  string :public, :definedInNonToken
  
  constructor() {}
  
  event :Greet, { greeting: :string }
  
  function :_mint, { to: :address, amount: :uint256 }, :public, :virtual do
    s.definedInNonToken = "definedInNonToken"
    emit :Greet, greeting: "Hello"
  end
  
  function :nonTokenFunction, :public do
    s.definedInNonToken = "nonTokenFunctionCalled"
  end
  
  function :nonClosestParentFunction, {}, :public do
  end
end

contract :FarthestParent do
  function :definedInNonClosestParent, :public, :virtual do
  end
  
  function :closestParentFunction, :public, :virtual do
  end
end

contract :TestContractMultipleInheritance, is: [:FarthestParent, :TestContract, :NonToken] do
  string :public, :definedHere

  constructor(
    name: :string,
    symbol: :string,
    decimals: :uint8
  ) {
    
    TestContract.constructor(name: name, symbol: symbol, decimals: decimals)
    NonToken.constructor()
    
    s.definedHere = "definedHere"
  }

  function :_mint, { to: :address, amount: :uint256 }, :public, :override do
    TestContract._mint(to: to, amount: amount)
    NonToken._mint(to: to, amount: amount)
    ERC20._mint(to: to, amount: amount)
  end
  
  function :testNonClosestParent, :public do
    definedInNonClosestParent
  end
  
  function :testNonClosestParentFunction, :public do
    nonClosestParentFunction
  end
  
  function :closestParentFunction, :public, :override do
  end
  
  function :callDistantParent, :public do
    StartingParent.definedInNonClosestParent
  end
end
