pragma :rubidity, "1.0.0"

import '/app/models/contracts/ERC20.rubidity'

contract :ERC20Receiver, is: :ERC20 do
  constructor() {
    ERC20.constructor(name: "bye", symbol: "B", decimals: 18)
  }
end

contract :ERC20Minimal, is: :ERC20 do
  constructor(name: :string, symbol: :string, decimals: :uint8) {
    ERC20.constructor(name, symbol, decimals)
  }
end

contract :AddressArg do
  event :SayHi, { sender: :address }
  event :Responded, { response: :string }
  
  constructor(testAddress: :address) {
    emit :SayHi, sender: testAddress
  }
  
  function :respond, { greeting: :string }, :public do
    emit :Responded, response: (greeting + " back")
  end
end

contract :Receiver do
  event :MsgSender, { sender: :address }
  
  constructor() {}
  
  function :sayHi, {}, :public, :view, returns: :string do
    return "hi"
  end
  
  function :receiveCall, { }, :public, returns: :uint256 do
    emit :MsgSender, sender: msg.sender
    
    return block.number
  end
  
  function :internalCall, { }, :internal do
  end
  
  function :name, {}, :public, :view, returns: :string do
    return "hi"
  end
end

contract :Caller do
  event :BlockNumber, { number: :uint256 }
  
  constructor() {}
  
  function :makeCall, { receiver: :address }, :public, returns: :string do
    resp = Receiver(receiver).receiveCall()
    
    emit :BlockNumber, number: block.number
    emit :BlockNumber, number: resp
    
    return Receiver(receiver).sayHi()
  end
  
  function :callInternal, { receiver: :address }, :public do
    Receiver(receiver).internalCall()
  end
  
  function :testImplements, { receiver: :address }, :public, returns: :string do
    ERC20(receiver).name()
  end
end

contract :Deployer do
  event :ReceiverCreated, { contract: :address }
  event :ContractCreated, { contract: :address }

  constructor() {}
  
  function :createReceiver, { name: :string, symbol: :string, decimals: :uint256 }, :public, returns: :address do
    erc20 = new ERC20Minimal(name, symbol, decimals)
    
    emit :ReceiverCreated, contract: erc20.address
    
    return erc20.address
  end

  function :createMalformedReceiver, { name: :string }, :public, returns: :address do

    erc20 = new ERC20Minimal(name)

    emit :ReceiverCreated, contract: erc20.address
    
    return erc20.address
  end
  
  function :createAddressArgContract, { testAddress: :address }, :public, returns: :address do
    contract = new AddressArg(testAddress)

    emit :ReceiverCreated, contract: contract.address

    return contract.address
  end
  
  function :createAddressArgContractAndRespond, { testAddress: :address, greeting: :string }, :public do
    contract = new AddressArg(testAddress)
    emit :ReceiverCreated, contract: contract.address
    contract.respond(greeting)
  end
  
  function :createERC20Minimal, { name: :string, symbol: :string, decimals: :uint256 }, :public, returns: :address do
    contract = new ERC20Minimal(name, symbol, decimals)
    
    emit :ContractCreated, contract: contract.address
    
    return contract.address
  end
  
  function :callRespond, { contract_address: :address, greeting: :string }, :public do
    contract = AddressArg(contract_address)
    contract.respond(greeting)
  end
end

contract :CallerTwo do
  address :deployerAddress
  
  constructor(deployerAddress: :address) {
    s.deployerAddress = deployerAddress
  }
  
  function :callDeployer, {}, :public, returns: :address do
    deployer = Deployer(s.deployerAddress)

    deployer.createERC20Minimal("myToken", "MTK", 18)
  end
end

contract :MultiDeployer do
  constructor() {}

  function :deployContracts, { deployerAddress: :address }, :public, returns: :address do
    contract = new CallerTwo(deployerAddress)
    testNoArgs = new MultiDeployer()
    
    contract.callDeployer()
  end
end
