pragma :rubidity, "1.0.0"

import '/app/models/contracts/ERC20.rubidity'

contract :StorageLayoutTest, is: :ERC20 do
  uint256 :public, :var1
  uint256 :public, :var2
  uint256 :public, :var3
  uint256 :public, :var4
  
  array :uint256, :public, :testArrayFixedLength, length: 3
  array :uint256, :public, :testArrayVariableLength
  
  mapping ({ string: array(:string) }), :public, :arrayInMappingVariable
  mapping ({ string: array(:string, length: 3) }), :public, :arrayInMappingFixed
  
  mapping ({ string: mapping({ string: :string })}), :public, :getPair
  
  function :addPair, { key1: :string, key2: :string, value: :string }, :public, returns: nil do
    s.getPair[key1][key2] = value
    s.getPair[key2][key1] = value
    nil
  end
  
  
  # array array(array(:string)), :public, :arrayOfArrays
  
  constructor(name: :string) {
    ERC20.constructor(name: name, symbol: "symbol", decimals: 18)
  }
  
  function :pushTest, { value: :uint256 }, :public do
    p.testArrayVariableLength.push(value)
    nil
  end
  
  function :popTest, :public, returns: :uint256 do
    p.testArrayVariableLength.pop
  end
  
  function :changeName, { name: :string }, :public, returns: nil do
    p.name = name
    
    nil
  end
  
  function :getName, :public, :view, returns: :string do
    p.name
  end
  
  function :updateBalance, { amount: :uint256 }, :public, returns: nil do
    p.balanceOf[msg.sender] = amount
    
    nil
  end
  
  function :changeVar1, { newVar: :uint256, revert: :bool }, :public do
    require(!revert, "Revert")
    
    p.var1 = newVar
    nil
  end
  
  function :changeOtherVar1, { target: :address, newVar: :uint256, revert: :bool }, :public do
    StorageLayoutTest(target).changeVar1(newVar, revert)
    nil
  end
  
  function :oneSuccessOneRevert, { target: :address, newVar: :uint256 }, :public do
    StorageLayoutTest(target).changeVar1(newVar, false)
    StorageLayoutTest(target).changeVar1(newVar + 5, true)
    nil
  end
end
